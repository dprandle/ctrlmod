<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="classedi2c">
<title>edi2c class Reference</title>
<para>
    <programlisting>#include <link linkend="edi2c_8h">&lt;edi2c.h&gt;</link></programlisting>
</para>
        <simplesect>
            <title>Private Attributes</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool m_use_smbus</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pthread_mutex_t m_smbus_lock</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>pthread_mutex_t m_rw_delay_lock</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int32_t m_address</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>std::string m_adapter_name</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t m_read_delay</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t m_write_delay</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classedi2c_1a1af1282b3a5c22f8690a2758bf3720bb">edi2c</link> (
uint32_t adapterNum)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> <link linkend="classedi2c_1a35e32414433c5b66109ade0da6f98079">~edi2c</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a24e263124eb80f5c841f8b804b69e943">command_read</link> (
uint8_t reg, uint32_t bytes_to_read)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classedi2c_1a9c9e5492ab0aa7361e3871616dc1ee5e">enable_smbus</link> (
bool enable)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="classedi2c_1a53cd636c8a9fd4ca54e5b0473cc8cb84">read_byte</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="classedi2c_1a2b727b09d18b70cfd0466ce4d85a858b">read_word</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint8_t <link linkend="classedi2c_1af72f531db5a7112e6da2d9e626932519">read_reg_byte</link> (
uint8_t reg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int16_t <link linkend="classedi2c_1a0f5ed693ef1a4ecf95552d5fa459d839">read_reg_word</link> (
uint8_t reg)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classedi2c_1acd7b0631883fca709e2d65d184c29826">read_reg_bytes</link> (
uint8_t reg, uint8_t * buffer, uint32_t size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="classedi2c_1a6e9e5641194e8cd076e6cedfc6673ed3">read_delay</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>uint16_t <link linkend="classedi2c_1ac72e569257fb740b0431d8ce5fa5a3d5">write_delay</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classedi2c_1af56980b466616331c3a953f6b5c034ed">set_read_delay</link> (
uint16_t ms)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classedi2c_1a2e9079f183b0f087b55398c55b38b97f">set_write_delay</link> (
uint16_t ms)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void <link linkend="classedi2c_1a938ee09d908469548b31f6561d906528">set_target_address</link> (
int32_t addr)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a6888361fe70d4c9110113e4a45912f7c">smbus_enabled</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1ad0e06417e0b488df02b1864d316d72c1">start</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int32_t <link linkend="classedi2c_1aba709407bd42c5dcee257726dff12526">target_address</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a245ebdd9ac48c5671de79bebccf29e97">write_byte</link> (
uint8_t byte)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a31d8723f4c2678c2709fdff8e0b36f67">write_word</link> (
uint16_t word)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1ad54e95daa301895c7be525768ce0512a">write_reg_byte</link> (
uint8_t reg, uint8_t byte)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a220239a9eb19a4e0cb760e81259a25a4">write_reg_word</link> (
uint8_t reg, int16_t word)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>bool <link linkend="classedi2c_1a19785c35d613e72285234d194a294a09">write_reg_bytes</link> (
uint8_t reg, uint8_t * bytes, uint32_t size)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
        <simplesect>
            <title></title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int32_t <link linkend="classedi2c_1aa1745b60acd7437175af98c5f0df5621">_raw_read</link> (
uint8_t * buffer, uint32_t size)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int32_t <link linkend="classedi2c_1a6dc6591ef407ca71379a31fb998afb20">_raw_write</link> (
uint8_t * buffer, uint32_t size)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Brief Description</title>

<para><link linkend="classedi2c">edi2c</link> </para>
    </simplesect>
        <simplesect>
            <title>Detailed Description</title>

<para>Creates a new thread to run all communication transactions using i2c protocol. The way to use this class is just like any other &quot;edthreaded_fd&quot; subclass - with a main exception: The read_* functions are all blocking. The read function itself is not blocking. If you want to read a value from a register in a non blocking fashion then you must use command_read instead of read_* functions. The command_read function takes how many bytes to read as a parameter - and you can access theses bytes with &quot;read&quot;. </para>
                <para>Definition at line 28 of file edi2c.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>edi2c.h</para></listitem></itemizedlist></para>
        </simplesect>
            <section xml:id="classedi2c_1a1af1282b3a5c22f8690a2758bf3720bb">
                <title>edi2c::edi2c (uint32_t adapterNum=1)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a35e32414433c5b66109ade0da6f98079">
                <title>edi2c::~edi2c ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a24e263124eb80f5c841f8b804b69e943">
                <title>bool edi2c::command_read (uint8_t reg, uint32_t bytes_to_read)</title> <emphasis>command_read</emphasis>
                
<para>Read from a register in a non-blocking fashion - once the bytes have been read they will be available through read function. Nothing more will be written to the i2c device until bytes_to_read bytes have been read or the timeout period of time has been reached.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>reg</entry>
                                <entry>
<para>register to read bytes from </para>
</entry>
                            </row>
                            <row>
                                <entry>bytes_to_read</entry>
                                <entry>
<para>amount of bytes to read</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>Whether the command was successful or not. Will not be, for example, if no device is connected. </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1a9c9e5492ab0aa7361e3871616dc1ee5e">
                <title>void edi2c::enable_smbus (bool enable)</title> <emphasis>enaable_smbus</emphasis>
                
<para>Disabled by default, this will enable the smbus functions. Smbus supports more advanced styles of messaging between devices but not all devices support the smbus protocol.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>enable</entry>
                                <entry>
<para>Enable (true) or disable (false) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classedi2c_1a53cd636c8a9fd4ca54e5b0473cc8cb84">
                <title>uint8_t edi2c::read_byte ()</title> <emphasis>read_byte</emphasis>
                
<para>Blocks until one byte has been read or the maximum wait timeout has been reached.</para>

<para><formalpara><title>Returns: </title>

<para>byte that has been read </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1a2b727b09d18b70cfd0466ce4d85a858b">
                <title>uint16_t edi2c::read_word ()</title> <emphasis>read_word</emphasis>
                
<para>Blocks until one word has been read or the maximum wait timeout has been reached.</para>

<para><formalpara><title>Returns: </title>

<para>16 bit word </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1af72f531db5a7112e6da2d9e626932519">
                <title>uint8_t edi2c::read_reg_byte (uint8_t reg)</title> <emphasis>read_reg_byte</emphasis>
                
<para>Blocking read until 1 byte is read from a register.</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>reg</entry>
                                <entry>
<para>Register to read from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>Byte value read from register </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1a0f5ed693ef1a4ecf95552d5fa459d839">
                <title>int16_t edi2c::read_reg_word (uint8_t reg)</title> <emphasis>read_reg_word</emphasis>
                
<para>Blocking read until 1 word is read from a register</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>reg</entry>
                                <entry>
<para>Register to read from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                <formalpara><title>Returns: </title>

<para>2 byte value read from register </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1acd7b0631883fca709e2d65d184c29826">
                <title>void edi2c::read_reg_bytes (uint8_t reg, uint8_t *buffer, uint32_t size)</title> <emphasis>read_reg_bytes</emphasis>
                
<para>Blocking read until size bytes has been read. This is a convenience function which is the same as calling command_read(reg, size); int cnt = 0; while (cnt != size) cnt += read(buffer+cnt, size-cnt);</para>

<para>
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>reg</entry>
                                <entry>
<para>Register to read bytes from </para>
</entry>
                            </row>
                            <row>
                                <entry>buffer</entry>
                                <entry>
<para>Buffer to store read in bytes - bounds are not checked so make sure it is big enough </para>
</entry>
                            </row>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>Number of bytes to read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classedi2c_1a6e9e5641194e8cd076e6cedfc6673ed3">
                <title>uint16_t edi2c::read_delay ()</title> <emphasis>read_delay</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>number of milliseconds to delay the thread after each read command. </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1ac72e569257fb740b0431d8ce5fa5a3d5">
                <title>uint16_t edi2c::write_delay ()</title> <emphasis>write_delay</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>number of milliseconds to delay the thread after each write command. </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1af56980b466616331c3a953f6b5c034ed">
                <title>void edi2c::set_read_delay (uint16_t ms)</title> <emphasis>set_read_delay</emphasis>
                
<para>Set the thread read delay - how many milliseconds to delay the thread after each read 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>ms</entry>
                                <entry>
<para>Number of milliseconds </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classedi2c_1a2e9079f183b0f087b55398c55b38b97f">
                <title>void edi2c::set_write_delay (uint16_t ms)</title> <emphasis></emphasis>
                
<para>Set the thread write delay - how many milliseconds to delay the thread after each write 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>ms</entry>
                                <entry>
<para>Number of milliseconds </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classedi2c_1a938ee09d908469548b31f6561d906528">
                <title>void edi2c::set_target_address (int32_t addr)</title> <emphasis>set_target_address</emphasis>
                
<para>Set the target device address - all reads and writes will be done using this address 
                <formalpara>
                    <title/>
                    <table frame="all">
                        <title>Parameters</title>
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <tbody>
                            <row>
                                <entry>addr</entry>
                                <entry>
<para>usually 7 bit device address for the slave (can be 10 bit) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                </formalpara>
                </para>

            </section>
            <section xml:id="classedi2c_1a6888361fe70d4c9110113e4a45912f7c">
                <title>bool edi2c::smbus_enabled ()</title> <emphasis>smbus_enables</emphasis>
                
<para><formalpara><title>Returns: </title>

<para>Is smbus mode enabled? </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1ad0e06417e0b488df02b1864d316d72c1">
                <title>bool edi2c::start ()</title> <emphasis>start</emphasis>
                
<para>Starts a new thread for communication with the device. It also opens the file descriptor using the bus number supplied in the constructor. By default this is bus 1. If a thread has already been started, or a file descriptor is already open, this function will fail. <formalpara><title>Returns: </title>

<para>true for success and false for fail - check error code on fail </para>
</formalpara>
</para>

            </section>
            <section xml:id="classedi2c_1aba709407bd42c5dcee257726dff12526">
                <title>int32_t edi2c::target_address ()</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a245ebdd9ac48c5671de79bebccf29e97">
                <title>bool edi2c::write_byte (uint8_t byte)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a31d8723f4c2678c2709fdff8e0b36f67">
                <title>bool edi2c::write_word (uint16_t word)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1ad54e95daa301895c7be525768ce0512a">
                <title>bool edi2c::write_reg_byte (uint8_t reg, uint8_t byte)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a220239a9eb19a4e0cb760e81259a25a4">
                <title>bool edi2c::write_reg_word (uint8_t reg, int16_t word)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a19785c35d613e72285234d194a294a09">
                <title>bool edi2c::write_reg_bytes (uint8_t reg, uint8_t *bytes, uint32_t size)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1aa1745b60acd7437175af98c5f0df5621">
                <title>int32_t edi2c::_raw_read (uint8_t *buffer, uint32_t size)</title> <emphasis></emphasis>
                
            </section>
            <section xml:id="classedi2c_1a6dc6591ef407ca71379a31fb998afb20">
                <title>int32_t edi2c::_raw_write (uint8_t *buffer, uint32_t size)</title> <emphasis></emphasis>
                
            </section>
</section>
